<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE language SYSTEM "language.dtd"
[
    <!ENTITY space " ">
    <!ENTITY separators ",&#59;">
    <!ENTITY ns_punctuators "!&#37;&space;&amp;()+-/.*&lt;=&gt;?[]{|}~^&separators;">
    <!ENTITY punctuators ":&ns_punctuators;">
    <!-- printf-like format strings conversion specifiers -->
    <!ENTITY convspec "diouxXeEfFgGaAcsP&#37;">
]>
<language name="C++" section="Sources"
          version="1.49.8" kateversion="2.4"
          indenter="cstyle"
          mimetype="text/x-c++src;text/x-c++hdr;text/x-chdr"
          extensions="*.c++;*.cxx;*.cpp;*.cc;*.C;*.h;*.hh;*.H;*.h++;*.hxx;*.hpp;*.hcc;*.moc"
          author="Alex Turbov (i.zaufi@gmail.com)"
          priority="20">
<!--
##########################################################################
## Fixes by Sebastian Pipping (webmaster@hartwork.org)
##
## NOTE: Keep in sync with C highlighter! (c.xml)
##########################################################################
## Complete list of fixes by Alex Turbov (I.zaufi@gmail.com)
## can be found at:
## http://kde-files.org/content/show.php?content=90660
##########################################################################
-->
  <highlighting>
    <list name="keywords">
      <item> alignof </item>
      <item> asm </item>
      <item> auto </item>
      <item> break </item>
      <item> case </item>
      <item> catch </item>
      <item> class </item>
      <item> constexpr </item>
      <item> const_cast </item>
      <item> continue </item>
      <item> decltype </item>
      <item> default </item>
      <item> delete </item>
      <item> do </item>
      <item> dynamic_cast</item>
      <item> else </item>
      <item> enum </item>
      <item> explicit </item>
      <item> export </item> <!-- Unused but reserved for future use -->
      <item> false </item>
      <item> final </item> <!-- According N3272 -->
      <item> friend </item>
      <item> for </item>
      <item> goto </item>
      <item> if </item>
      <item> inline </item>
      <item> namespace </item>
      <item> new </item>
      <item> noexcept </item>
      <item> nullptr </item>
      <item> operator </item>
      <item> override </item> <!-- According N3272 -->
      <item> private </item>
      <item> protected </item>
      <item> public </item>
      <item> reinterpret_cast </item>
      <item> return </item>
      <item> sizeof </item>
      <item> static_assert </item>
      <item> static_cast </item>
      <item> struct </item>
      <item> switch </item>
      <item> template </item>
      <item> this </item>
      <item> throw </item>
      <item> true </item>
      <item> try </item>
      <item> typedef </item>
      <item> typeid </item>
      <item> typename </item>
      <item> union </item>
      <item> using </item>
      <item> virtual </item>
      <item> while </item>
      <!-- Alternative operators (see 2.12) -->
      <item> and </item>
      <item> and_eq </item>
      <item> bitand </item>
      <item> bitor </item>
      <item> compl </item>
      <item> not </item>
      <item> not_eq </item>
      <item> or </item>
      <item> or_eq </item>
      <item> xor </item>
      <item> xor_eq </item>
    </list>
    <!-- This keyword may appear in InternalsNS context. For example in code:
      details::some_class::template some_templated_static();
      and it should be displayed as keyword, not like part of details namespace...
      -->
    <list name="template">
      <item> template </item>
    </list>

    <list name="types">
      <item> bool </item>
      <item> char </item>
      <item> char16_t </item>
      <item> char32_t </item>
      <item> double </item>
      <item> float </item>
      <item> int </item>
      <item> long </item>
      <item> short </item>
      <item> signed </item>
      <item> unsigned </item>
      <item> void </item>
      <item> int8_t </item>
      <item> int16_t </item>
      <item> int32_t </item>
      <item> int64_t </item>
      <item> uint8_t </item>
      <item> uint16_t </item>
      <item> uint32_t </item>
      <item> uint64_t </item>
      <item> wchar_t </item>
    </list>
    <list name="modifiers">
      <item> const </item>
      <item> extern </item>
      <item> mutable </item>
      <item> register </item>
      <item> static </item>
      <item> thread_local </item>
      <item> volatile </item>
    </list>
    <list name="StdMacros">
      <item> __FILE__ </item>
      <item> __LINE__ </item>
      <item> __DATE__ </item>
      <item> __TIME__ </item>
      <item> __STDC__ </item>
      <item> __STDC_VERSION__ </item>
      <item> __STDC_HOSTED__ </item>
      <item> __STDC_ISO_10646__ </item>
      <item> __STDC_MB_MIGHT_NEQ_WC__ </item>
      <item> __cplusplus </item>
      <item> __func__ </item>
    </list>

    <contexts>
      <context attribute="Normal Text" lineEndContext="#stay" name="Normal">
        <DetectSpaces />
        <RegExpr attribute="Preprocessor" context="Outscoped" String="(#|%\:|\?\?=)\s*if\s+(0|false)\s*" beginRegion="PP" firstNonSpace="true" />
        <RegExpr attribute="Preprocessor" context="Inscoped" String="(#|%\:|\?\?=)\s*if\s+(1|true)\s*" beginRegion="PP" firstNonSpace="true" />
        <IncludeRules context="Main" />
      </context>

      <context attribute="Normal Text" lineEndContext="#stay" name="Main">
        <DetectChar context="AfterHash" char="#" firstNonSpace="true" lookAhead="true" />
        <Detect2Chars context="AfterHash" char="%" char1=":" firstNonSpace="true" lookAhead="true" />
        <StringDetect context="AfterHash" String="??=" firstNonSpace="true" lookAhead="true" />
        <Detect2Chars attribute="Error" context="#stay" char="%" char1=":" />
        <StringDetect attribute="Error" String="??=" context="#stay" />
        <StringDetect attribute="Region Marker" context="Region Marker" String="//BEGIN" beginRegion="Region1" firstNonSpace="true" />
        <StringDetect attribute="Region Marker" context="Region Marker" String="//END" endRegion="Region1" firstNonSpace="true" />
        <keyword attribute="Keyword" context="#stay" String="keywords" />
        <StringDetect attribute="Standard Classes" context="Standard Classes" String="std::" />
        <StringDetect attribute="Boost Stuff" context="Boost Stuff" String="boost::" />
        <StringDetect attribute="Boost Stuff" context="Boost Stuff" String="BOOST_" />
        <StringDetect attribute="Internals" context="InternalsNS" String="detail::" />
        <StringDetect attribute="Internals" context="InternalsNS" String="details::" />
        <StringDetect attribute="Internals" context="InternalsNS" String="aux::" />
        <StringDetect attribute="Internals" context="InternalsNS" String="internals::" />
        <keyword attribute="Data Type" context="#stay" String="types" />
        <keyword attribute="Type Modifiers" context="#stay" String="modifiers" />
        <keyword attribute="Standard Macros" context="#stay" String="StdMacros" />
        <IncludeRules context="DetectQt4Extensions##Qt4/C++" />
        <IncludeRules context="DetectGccExtensions##GCCExtensions" />
        <DetectChar attribute="String" context="String" char="&quot;" />
        <Detect2Chars attribute="String" context="String" char="U" char1="&quot;" />
        <Detect2Chars attribute="String" context="String" char="u" char1="&quot;" />
        <Detect2Chars attribute="String" context="String" char="L" char1="&quot;" />
        <StringDetect attribute="String" context="String" String="u8&quot;" />
        <RegExpr attribute="String" context="RawString" String="(u|u8|U|L)?R&quot;([^\(]{0,16})\(" lookAhead="true" />
        <RegExpr attribute="Error" context="#stay" String="(u|u8|U|L)?R&quot;([^\(]{16,})\(" />
        <DetectChar attribute="String" context="Char Literal" char="'" />
        <Detect2Chars attribute="String" context="Char Literal" char="L" char1="'" />
        <Detect2Chars attribute="String" context="U-Char Literal" char="u" char1="'" />
        <Detect2Chars attribute="String" context="U-Char Literal" char="U" char1="'" />
        <RegExpr attribute="Internals" context="#stay" String="_[a-zA-Z0-9_]+" />
        <RegExpr attribute="Internals" context="#stay" String="[a-zA-Z][a-zA-Z0-9_]*__\b" />
        <RegExpr attribute="Data Members (m_*)" context="#stay" String="[a-z][a-zA-Z0-9_]*_\b" />
        <RegExpr attribute="Data Members (m_*)" context="#stay" String="m_[a-zA-Z0-9_]+" />
        <RegExpr attribute="Globals (g_*)" context="#stay" String="g_[a-zA-Z0-9_]+" />
        <RegExpr attribute="Statics (s_*)" context="#stay" String="s_[a-zA-Z0-9_]+" />
        <RegExpr attribute="CONSTS/MACROS" context="#stay" String="[A-Z][A-Z0-9_]{2,}\b" />
        <RegExpr attribute="Types (*_t/*_type)" context="#stay" String="[a-zA-Z][a-zA-Z0-9_]*_t(ype)?\b" />
        <DetectIdentifier />
        <Float attribute="Float" context="#stay">
          <AnyChar String="fFlL" attribute="Float" context="#stay" />
        </Float>
        <HlCOct attribute="Octal" context="#stay" />
        <HlCHex attribute="Hex" context="#stay" />
        <Int attribute="Decimal" context="#stay">
          <StringDetect attribute="Decimal" context="#stay" String="ULL" insensitive="true" />
          <StringDetect attribute="Decimal" context="#stay" String="LUL" insensitive="true" />
          <StringDetect attribute="Decimal" context="#stay" String="LLU" insensitive="true" />
          <StringDetect attribute="Decimal" context="#stay" String="UL" insensitive="true" />
          <StringDetect attribute="Decimal" context="#stay" String="LU" insensitive="true" />
          <StringDetect attribute="Decimal" context="#stay" String="LL" insensitive="true" />
          <StringDetect attribute="Decimal" context="#stay" String="U" insensitive="true" />
          <StringDetect attribute="Decimal" context="#stay" String="L" insensitive="true" />
        </Int>
        <IncludeRules context="##Doxygen" />
        <IncludeRules context="AlignedComments" />
        <Detect2Chars attribute="Comment" context="Commentar 2" char="/" char1="*" beginRegion="Comment" />
        <DetectChar attribute="Symbol" context="#stay" char="{" beginRegion="Brace1" />
        <DetectChar attribute="Symbol" context="#stay" char="}" endRegion="Brace1" />
        <AnyChar attribute="Separator Symbol" context="#stay" String="&separators;" />
        <AnyChar attribute="Symbol" context="#stay" String="&punctuators;" />
        <DetectChar attribute="Error" context="#stay" char="#" />
        <DetectChar attribute="Error" context="#stay" char="$" />
        <DetectChar attribute="Error" context="#stay" char="@" />
      </context>

      <context attribute="String" lineEndContext="#pop" name="Char Literal">
        <IncludeRules context="Universal Char" />
        <DetectChar attribute="String Char" context="Simple Esc" char="\" />
        <DetectChar attribute="String" context="#pop" char="'" />
      </context>

      <context attribute="String" lineEndContext="#pop" name="U-Char Literal">
        <IncludeRules context="Universal Char" />
        <DetectChar attribute="String Char" context="Simple Esc" char="\" />
        <DetectChar attribute="String" context="#pop" char="'" />
        <RegExpr attribute="Error" context="#stay" String="[^']{2,}" />
        <RegExpr attribute="String" context="#stay" String=".{1}" />
      </context>

      <context attribute="String Char" lineEndContext="#pop" name="Simple Esc">
        <AnyChar attribute="String Char" context="#pop" String="tnvbrfa'&quot;\" />
        <RegExpr attribute="String Char" context="#pop" String="[0-7]{1,3}" />
        <RegExpr attribute="String Char" context="#pop" String="x[0-9A-Fa-f]{1,}" />
        <RegExpr attribute="String" context="#pop" String="." />
      </context>

      <context attribute="String Char" lineEndContext="#pop" name="Universal Char">
        <RegExpr attribute="String Char" context="#stay" String="\\u[0-9A-Fa-f]{4}" />
        <RegExpr attribute="Error" context="#stay" String="\\u.{0,3}" />
        <RegExpr attribute="String Char" context="#stay" String="\\U[0-9A-Fa-f]{8}" />
        <RegExpr attribute="Error" context="#stay" String="\\U.{0,7}" />
      </context>

      <context attribute="String" lineEndContext="#pop" name="String">
        <LineContinue attribute="String" context="#stay" />
        <HlCStringChar attribute="String Char" context="#stay" />
        <IncludeRules context="Universal Char" />
        <RegExpr attribute="String Char" context="#stay" String="%[^&quot;&convspec;]*[&convspec;]" />
        <DetectChar attribute="String" context="#pop" char="&quot;" />
      </context>

      <context attribute="String" lineEndContext="#stay" name="RawString" dynamic="true">
        <LineContinue attribute="String" context="#stay" />
        <RegExpr attribute="String Char" context="#stay" String="%[^&quot;&convspec;]*[&convspec;]" />
        <RegExpr attribute="String" context="#pop" String="\)%2&quot;" dynamic="true"/>
      </context>

      <context lineEndContext="#pop" name="DetectIdentifierEnd" attribute="Normal Text">
        <AnyChar context="#pop" String="&punctuators;" attribute="Symbol" />
      </context>

      <context attribute="Region Marker" lineEndContext="#pop" name="Region Marker" />

      <context lineEndContext="#pop" name="DetectNSEnd" attribute="Normal Text">
        <keyword attribute="Keyword" context="#stay" String="template" />
        <DetectIdentifier context="#stay" />
        <AnyChar context="#pop" String="&separators;" attribute="Separator Symbol" />
        <AnyChar context="#pop" String="&ns_punctuators;" attribute="Symbol" />
        <AnyChar context="#stay" String="&space;" attribute="Normal Text" />
      </context>

      <context attribute="Standard Classes" lineEndContext="#pop" name="Standard Classes">
        <IncludeRules context="DetectNSEnd" />
      </context>

      <context attribute="Boost Stuff" lineEndContext="#pop" name="Boost Stuff">
        <IncludeRules context="DetectNSEnd" />
      </context>

      <context attribute="Internals" lineEndContext="#pop" name="InternalsNS">
        <IncludeRules context="DetectNSEnd" />
      </context>

      <context attribute="Comment" lineEndContext="#pop" name="Commentar 1">
        <LineContinue attribute="Comment" context="#stay" />
        <DetectSpaces />
        <IncludeRules context="##Alerts" />
        <IncludeRules context="##Modelines" />
        <DetectIdentifier />
      </context>

      <context attribute="Comment" lineEndContext="#stay" name="Commentar 2">
        <DetectSpaces />
        <Detect2Chars attribute="Comment" context="#pop" char="*" char1="/" endRegion="Comment" />
        <IncludeRules context="##Alerts" />
        <IncludeRules context="##Modelines" />
        <DetectIdentifier />
      </context>

      <context attribute="Error" lineEndContext="#pop" name="AfterHash">
        <!-- define, elif, else, endif, error, if, ifdef, ifndef, include, include_next, line, pragma, undef, warning -->
        <RegExpr attribute="Preprocessor" context="Preprocessor" String="(#|%\:|\?\?=)\s*if(?:def|ndef)?(?=\s+\S)" insensitive="true" beginRegion="PP" firstNonSpace="true" />
        <RegExpr attribute="Preprocessor" context="Preprocessor" String="(#|%\:|\?\?=)\s*endif" insensitive="true" endRegion="PP" firstNonSpace="true" />
        <RegExpr attribute="Preprocessor" context="Define" String="(#|%\:|\?\?=)\s*define.*((?=\\))" insensitive="true" firstNonSpace="true" />
        <RegExpr attribute="Preprocessor" context="Preprocessor" String="(#|%\:|\?\?=)\s*(?:el(?:se|if)|include(?:_next)?|define|undef|line|error|warning|pragma)" insensitive="true" firstNonSpace="true" />
        <RegExpr attribute="Preprocessor" context="Preprocessor" String="(#|%\:|\?\?=)\s+[0-9]+" insensitive="true" firstNonSpace="true" />
      </context>

      <context attribute="Preprocessor" lineEndContext="#pop" name="Preprocessor">
        <LineContinue attribute="Preprocessor" context="#stay" />
        <keyword attribute="Standard Macros" context="#stay" String="StdMacros" />
        <IncludeRules context="GNUMacros##GCCExtensions" />
        <RangeDetect attribute="Prep. Lib" context="#stay" char="&quot;" char1="&quot;" />
        <RangeDetect attribute="Prep. Lib" context="#stay" char="&lt;" char1="&gt;" />
        <IncludeRules context="##Doxygen" />
        <Detect2Chars attribute="Comment" context="Commentar/Preprocessor" char="/" char1="*" beginRegion="Comment2" />
        <IncludeRules context="AlignedComments" />
      </context>

      <context attribute="Preprocessor" lineEndContext="#pop" name="Define">
        <LineContinue attribute="Separator Symbol" context="#stay" />
        <DetectChar attribute="Error" context="#stay" char="\\" />
        <keyword attribute="Standard Macros" context="#stay" String="StdMacros" />
        <IncludeRules context="GNUMacros##GCCExtensions" />
      </context>

      <context attribute="Comment" lineEndContext="#stay" name="Commentar/Preprocessor">
        <DetectSpaces />
        <Detect2Chars attribute="Comment" context="#pop" char="*" char1="/" endRegion="Comment2" />
        <DetectIdentifier />
      </context>

      <context attribute="Comment" lineEndContext="#stay" name="Outscoped Common" >
        <DetectSpaces />
        <IncludeRules context="##Alerts" />
        <IncludeRules context="##Modelines" />
        <DetectIdentifier />
        <IncludeRules context="##Doxygen" />
        <IncludeRules context="AlignedComments" />
        <!-- Do not try to detect "C" style comments inside outscoped text
             to prevent incorrect highlighting in case of overlapped (or not closed properly)
             comment block...

             <Detect2Chars attribute="Comment" context="Commentar 2" char="/" char1="*" beginRegion="Comment" />
        -->
        <RegExpr attribute="Comment" context="Outscoped intern" String="(#|%\:|\?\?=)\s*if" beginRegion="PP" firstNonSpace="true" />
      </context>

      <context attribute="Comment" lineEndContext="#stay" name="Outscoped" >
        <IncludeRules context="Outscoped Common" />
        <RegExpr attribute="Preprocessor" context="#pop" String="(#|%\:|\?\?=)\s*el(?:se|if)" firstNonSpace="true" />
        <RegExpr attribute="Preprocessor" context="#pop" String="(#|%\:|\?\?=)\s*endif" endRegion="PP" firstNonSpace="true" />
      </context>

      <context attribute="Comment" lineEndContext="#stay" name="Outscoped 2" >
        <IncludeRules context="Outscoped Common" />
        <RegExpr attribute="Preprocessor" context="#pop#pop" String="(#|%\:|\?\?=)\s*endif" endRegion="PP" firstNonSpace="true" />
      </context>

      <context attribute="Normal Text" lineEndContext="#stay" name="Inscoped" >
        <DetectSpaces />
        <RegExpr attribute="Preprocessor" context="Outscoped" String="(#|%\:|\?\?=)\s*if\s+(0|false)\s*" beginRegion="PP" firstNonSpace="true" />
        <RegExpr attribute="Preprocessor" context="Outscoped 2" String="(#|%\:|\?\?=)\s*el(?:se|if)" firstNonSpace="true" />
        <IncludeRules context="Main" />
      </context>

      <context attribute="Comment" lineEndContext="#stay" name="Outscoped intern">
        <DetectSpaces />
        <IncludeRules context="##Alerts" />
        <IncludeRules context="##Modelines" />
        <DetectIdentifier />
        <IncludeRules context="##Doxygen" />
        <IncludeRules context="AlignedComments" />
        <Detect2Chars attribute="Comment" context="Commentar 2" char="/" char1="*" beginRegion="Comment" />
        <RegExpr attribute="Comment" context="Outscoped intern" String="(#|%\:|\?\?=)\s*if" beginRegion="PP" firstNonSpace="true" />
        <RegExpr attribute="Comment" context="#pop" String="(#|%\:|\?\?=)\s*endif" endRegion="PP" firstNonSpace="true" />
      </context>

      <context name="AlignedComments" lineEndContext="#stay" attribute="Comment">
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="0" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="4" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="8" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="12" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="16" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="20" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="24" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="28" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="32" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="36" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="40" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="44" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="48" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="52" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="56" char="/" char1="/" />
        <Detect2Chars attribute="Region Marker" context="Commentar 1" column="60" char="/" char1="/" />
        <Detect2Chars attribute="Comment" context="Commentar 1" char="/" char1="/" />
      </context>
    </contexts>

    <itemDatas>
      <itemData name="Normal Text"       defStyleNum="dsNormal" spellChecking="false" />
      <itemData name="Keyword"           defStyleNum="dsKeyword" spellChecking="false" />
      <itemData name="Data Type"         defStyleNum="dsDataType" spellChecking="false" />
      <itemData name="Type Modifiers"    defStyleNum="dsDataType" spellChecking="false" />
      <itemData name="Decimal"           defStyleNum="dsDecVal" spellChecking="false" />
      <itemData name="Octal"             defStyleNum="dsBaseN" spellChecking="false" />
      <itemData name="Hex"               defStyleNum="dsBaseN" spellChecking="false" />
      <itemData name="Float"             defStyleNum="dsFloat" spellChecking="false" />
      <itemData name="Char"              defStyleNum="dsChar" spellChecking="false" />
      <itemData name="String"            defStyleNum="dsString" />
      <itemData name="String Char"       defStyleNum="dsChar" />
      <itemData name="Comment"           defStyleNum="dsComment" spellChecking="false" />
      <itemData name="Symbol"            defStyleNum="dsNormal" spellChecking="false" />
      <itemData name="Separator Symbol"  defStyleNum="dsNormal" spellChecking="false" />
      <itemData name="Data Members (m_*)" defStyleNum="dsNormal" spellChecking="false" />
      <itemData name="Globals (g_*)"     defStyleNum="dsNormal" spellChecking="false" />
      <itemData name="Statics (s_*)"     defStyleNum="dsNormal" spellChecking="false" />
      <itemData name="Types (*_t/*_type)" defStyleNum="dsNormal" spellChecking="false" />
      <itemData name="CONSTS/MACROS"     defStyleNum="dsNormal" spellChecking="false" />
      <itemData name="Preprocessor"      defStyleNum="dsOthers" spellChecking="false" />
      <itemData name="Prep. Lib"         defStyleNum="dsOthers" spellChecking="false" />
      <itemData name="Standard Macros"   defStyleNum="dsOthers" spellChecking="false" />
      <itemData name="Standard Classes"  defStyleNum="dsNormal" color="#59ff00" selColor="#59ff00" bold="0" italic="0" spellChecking="false" />
      <itemData name="Boost Stuff"       defStyleNum="dsNormal" color="#23a45b" selColor="#23a45b" bold="0" italic="0" spellChecking="false" />
      <itemData name="Internals"         defStyleNum="dsNormal" color="#808080" selColor="#808080" bold="0" italic="0" spellChecking="false" />
      <itemData name="Region Marker"     defStyleNum="dsRegionMarker" spellChecking="false" />
      <itemData name="Error"             defStyleNum="dsError" spellChecking="false" />
    </itemDatas>
  </highlighting>
  <general>
    <comments>
      <comment name="singleLine" start="//" />
      <comment name="multiLine" start="/*" end="*/" region="Comment" />
    </comments>
    <keywords casesensitive="1" />
  </general>
</language>
<!-- kate: indent-width 2; -->
