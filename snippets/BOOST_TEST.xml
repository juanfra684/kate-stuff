<snippets namespace="" license="GPL" filetypes="C++" snippetlicense="public domain" authors="Alex Turbov &lt;I.zaufi@gmail.com>" name="boost::test by zaufi">
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_TEST_MESSAGE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(std::cout compatible expression)</displayarguments>
  <fillin>BOOST_TEST_MESSAGE("${msg}");
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_TEST_CHECKPOINT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(std::cout compatible expression)</displayarguments>
  <fillin>BOOST_TEST_CHECKPOINT("${msg}");
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_TEST_PASSPOINT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>()</displayarguments>
  <fillin>BOOST_TEST_PASSPOINT();
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_FAIL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(message)</displayarguments>
  <fillin>BOOST_FAIL("${msg}");
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr)</displayarguments>
  <fillin>BOOST_WARN(${expr});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr)</displayarguments>
  <fillin>BOOST_CHECK(${expr});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr)</displayarguments>
  <fillin>BOOST_REQUIRE(${expr});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_MESSAGE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, msg)</displayarguments>
  <fillin>BOOST_WARN_MESSAGE(${expr}, "${msg}");
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_MESSAGE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, msg)</displayarguments>
  <fillin>BOOST_CHECK_MESSAGE(${expr}, "${msg}");
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_MESSAGE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, msg)</displayarguments>
  <fillin>BOOST_REQUIRE_MESSAGE(${expr}, "${msg}");
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_BITWISE_EQUAL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_BITWISE_EQUAL(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_BITWISE_EQUAL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_BITWISE_EQUAL(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_BITWISE_EQUAL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_BITWISE_EQUAL(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_EQUAL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_EQUAL(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_EQUAL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_EQUAL(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_EQUAL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_EQUAL(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_EQUAL_COLLECTIONS</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left_begin, left_end, right_begin, right_end)</displayarguments>
  <fillin>BOOST_WARN_EQUAL_COLLECTIONS(${left}.begin(), %{left}.end(), ${right}.begin(), %{right}.end());
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_EQUAL_COLLECTIONS</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left_begin, left_end, right_begin, right_end)</displayarguments>
  <fillin>BOOST_CHECK_EQUAL_COLLECTIONS(${left}.begin(), %{left}.end(), ${right}.begin(), %{right}.end());
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_EQUAL_COLLECTIONS</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left_begin, left_end, right_begin, right_end)</displayarguments>
  <fillin>BOOST_REQUIRE_EQUAL_COLLECTIONS(${left}.begin(), %{left}.end(), ${right}.begin(), %{right}.end());
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_GE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_GE(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_GE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_GE(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_GE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_GE(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_GT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_GT(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_GT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_GT(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_GT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_GT(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_LE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_LE(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_LE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_LE(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_LE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_LE(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_LT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_LT(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_LT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_LT(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_LT</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_LT(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_NE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_WARN_NE(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_NE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_CHECK_NE(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_NE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right)</displayarguments>
  <fillin>BOOST_REQUIRE_NE(${left}, ${right});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_THROW</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, excpt)</displayarguments>
  <fillin>BOOST_WARN_THROW(${expr}, ${excpt:std::exception});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_THROW</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, excpt)</displayarguments>
  <fillin>BOOST_CHECK_THROW(${expr}, ${excpt:std::exception});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_THROW</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, excpt)</displayarguments>
  <fillin>BOOST_REQUIRE_THROW(${expr}, ${excpt:std::exception});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_NO_THROW</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, excpt)</displayarguments>
  <fillin>BOOST_WARN_NO_THROW(${expr}, ${excpt:std::exception});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_NO_THROW</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, excpt)</displayarguments>
  <fillin>BOOST_CHECK_NO_THROW(${expr}, ${excpt:std::exception});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_NO_THROW</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(expr, excpt)</displayarguments>
  <fillin>BOOST_REQUIRE_NO_THROW(${expr}, ${excpt:std::exception});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_CLOSE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right, tolerance)</displayarguments>
  <fillin>BOOST_WARN_CLOSE(${left}, ${right}, ${tolerance:0.0001});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_CLOSE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right, tolerance)</displayarguments>
  <fillin>BOOST_CHECK_CLOSE(${left}, ${right}, ${tolerance:0.0001});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_CLOSE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right, tolerance)</displayarguments>
  <fillin>BOOST_REQUIRE_CLOSE(${left}, ${right}, ${tolerance:0.0001});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_CLOSE_FRACTION</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right, tolerance)</displayarguments>
  <fillin>BOOST_WARN_CLOSE_FRACTION(${left}, ${right}, ${tolerance:0.0001});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_CLOSE_FRACTION</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right, tolerance)</displayarguments>
  <fillin>BOOST_CHECK_CLOSE_FRACTION(${left}, ${right}, ${tolerance:0.0001});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_CLOSE_FRACTION</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(left, right, tolerance)</displayarguments>
  <fillin>BOOST_REQUIRE_CLOSE_FRACTION(${left}, ${right}, ${tolerance:0.0001});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_PREDICATE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(predicate, args_pp_seq)</displayarguments>
  <fillin>BOOST_WARN_PREDICATE(${pred}, (${p1}));
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_PREDICATE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(predicate, args_pp_seq)</displayarguments>
  <fillin>BOOST_CHECK_PREDICATE(${pred}, (${p1}));
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_PREDICATE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(predicate, args_pp_seq)</displayarguments>
  <fillin>BOOST_REQUIRE_PREDICATE(${pred}, (${p1}));
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_WARN_SMALL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(value, tolerance)</displayarguments>
  <fillin>BOOST_WARN_SMALL(${value}, ${tolerance:0.0001});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_CHECK_SMALL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(value, tolerance)</displayarguments>
  <fillin>BOOST_CHECK_SMALL(${value}, ${tolerance:0.0001});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_REQUIRE_SMALL</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(value, tolerance)</displayarguments>
  <fillin>BOOST_REQUIRE_SMALL(${value}, ${tolerance:0.0001});
${cursor}</fillin>
 </item>
 <item>
  <displayprefix></displayprefix>
  <match>BOOST_AUTO_TEST_CASE</match>
  <displaypostfix></displaypostfix>
  <displayarguments>(name)</displayarguments>
  <fillin>BOOST_AUTO_TEST_CASE(${name:Test}) {
	${cursor}
}</fillin>
 </item>
</snippets>
